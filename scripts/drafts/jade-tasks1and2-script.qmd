---
title: "Tasks 1+2 - Jade"
format: html
---
```{r}
library(tidyverse)
raw_data <- read_csv(here::here("data/biomarker-raw.csv"))
```


## Task 1

### 1.  What do you imagine is the reason for log-transforming the protein levels in `biomarker-raw.csv`? (Hint: look at the distribution of raw values for a sample of proteins.)

```{r}
raw_data_long <- raw_data |> 
  select(Group:`Induced myeloid leukemia cell differentiation protein Mcl-1`, -`Target Full Name`) |> 
  mutate(ID = row_number()) |> 
  pivot_longer(`E3 ubiquitin-protein ligase CHIP`:`Induced myeloid leukemia cell differentiation protein Mcl-1`) |> 
  filter(ID > 1) |> 
  mutate(value = as.numeric(value))

raw_data_long |> 
  filter(value <= 20000) |> 
  ggplot(aes(x = value)) + 
  geom_histogram() + 
  facet_wrap(~name)

raw_data_long |> 
  group_by(name) |> 
  summarize("Mean Level" = mean(na.omit(value)))
```
We see that the protein levels in `biomarker-raw.csv` seem to be incredibly high, with a lot of the proteins having mean levels at or above 1000. Additionally, we see hat a lot of the distributions are pretty heavily right-skewed, and thus are likely not to be normally distributed.

In contrast, when we look at the same proteins with log-transformed levels below, we see that the now the average protein level is close to 3, which is significantly lower than it was. Also, we see that the log-transform has decreased the skew of the distribution of the protein levels, causing them to be more similar to a normal distribution.

```{r}
raw_data_long_log <- raw_data_long |> 
  mutate(log_value = log10(value))

raw_data_long_log |> 
  ggplot(aes(x = log_value)) + 
  geom_histogram() + 
  facet_wrap(~name)

raw_data_long_log |> 
  group_by(name) |> 
  summarize("Mean Log Level" = mean(na.omit(log_value)))

```


## Task 2

### 2.  Temporarily remove the outlier trimming from preprocessing and do some exploratory analysis of outlying values. Are there specific *subjects* (not values) that seem to be outliers? If so, are outliers more frequent in one group or the other? (Hint: consider tabluating the number of outlying values per subject.)

```{r}
# get names
var_names <- read_csv(here::here('data/biomarker-raw.csv'), 
                     col_names = F, 
                     n_max = 2, 
                     col_select = -(1:2)) %>%
  t() %>%
  as_tibble() %>%
  rename(name = V1, 
         abbreviation = V2) %>%
  na.omit()

# function for trimming outliers (good idea??)
trim <- function(x, .at){
  x[abs(x) > .at] <- sign(x[abs(x) > .at])*.at
  return(x)
}

# read in data
biomarker_clean_outliers <- read_csv(here::here('data/biomarker-raw.csv'), 
         skip = 2,
         col_select = -2L,
         col_names = c('group', 
                       'empty',
                       pull(var_names, abbreviation),
                       'ados'),
         na = c('-', '')) %>%
  filter(!is.na(group)) %>%
  # log transform, center and scale, and trim
  mutate(across(.cols = -c(group, ados), 
                ~ (scale(log10(.x))[, 1]))) %>%
  # reorder columns
  select(group, ados, everything())

```

#### Looking at if some proteins are more likely to be outliers than others.

```{r}
longer_outliers <- biomarker_clean_outliers |> 
  mutate(ID = row_number()) |> 
  pivot_longer(CHIP:PLXB2)

longer_outliers |> 
  filter(value <= -3 | value >= 3) |> 
  group_by(name) |> 
  summarize(n = n()) |> 
  filter(n >2)
```

Most of the proteins had an outlier value in at least one participant, only `r 344 / 1317 * 100`% of proteins have 3 or more participants with an outlier value.

### Looking if particular *subjects* consistently have outliers
```{r}
longer_outliers |> 
  filter(value <= -3 | value >= 3) |> 
  group_by(ID) |> 
  summarise(n = n(),
            group = group[1])
```

