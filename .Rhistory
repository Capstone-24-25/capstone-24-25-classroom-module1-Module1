<<<<<<< HEAD
values_to = "value")
# Create a histogram facet plot
ggplot(biomarker_long, aes(x = value)) +
geom_histogram(fill = "steelblue", color = "black") +
facet_wrap(~ protein, scales = "free_x") +
labs(title = "Distribution of Selected Proteins",
x = "Protein Value", y = "Frequency")
=======
mutate(est = as.factor(pred > 0.5), tr_c = as.factor(class)) %>%
class_metrics(estimate = est,
truth = tr_c, pred,
event_level = 'second')
proteins_sstar <- intersect(proteins_s1, proteins_s2)
biomarker_sstar <- biomarker_clean %>%
select(group, any_of(proteins_sstar)) %>%
mutate(class = (group == 'ASD')) %>%
select(-group)
# partition into training and test set
set.seed(123)
biomarker_split <- biomarker_sstar %>%
initial_split(prop = 0.8)
# fit logistic regression model to training set
fit <- glm(group ~ .,
data = training(biomarker_split),
family = 'binomial')
proteins_sstar <- intersect(proteins_s1, proteins_s2)
biomarker_sstar <- biomarker_clean %>%
select(group, any_of(proteins_sstar)) %>%
mutate(class = (group == 'ASD')) %>%
select(-group)
# partition into training and test set
set.seed(123)
biomarker_split <- biomarker_sstar %>%
initial_split(prop = 0.8)
# fit logistic regression model to training set
fit <- glm(class ~ .,
data = training(biomarker_split),
family = 'binomial')
# evaluate errors on test set
class_metrics <- metric_set(sensitivity,
specificity,
accuracy,
roc_auc)
testing(biomarker_split) %>%
add_predictions(fit, type = 'response') %>%
mutate(est = as.factor(pred > 0.5), tr_c = as.factor(class)) %>%
class_metrics(estimate = est,
truth = tr_c, pred,
event_level = 'second')
>>>>>>> RebeccaC
# Split the data into training and testing sets
set.seed(123)
biomarker_split <- initial_split(biomarker_clean, prop = 0.8)
train_data <- training(biomarker_split)
test_data <- testing(biomarker_split)
## Multiple Testing
test_fn <- function(.df){
t_test(.df,
formula = level ~ group,
order = c('ASD', 'TD'),
alternative = 'two-sided',
var.equal = F)
}
ttests_out <- train_data %>%
# drop ADOS score
select(-ados) %>%
# arrange in long format
pivot_longer(-group,
names_to = 'protein',
values_to = 'level') %>%
# nest by protein
nest(data = c(level, group)) %>%
# compute t tests
mutate(ttest = map(data, test_fn)) %>%
unnest(ttest) %>%
# sort by p-value
arrange(p_value) %>%
# multiple testing correction
mutate(m = n(),
hm = log(m) + 1/(2*m) - digamma(1),
rank = row_number(),
p.adj = m*hm*p_value/rank)
# select significant proteins based on adjusted p-value
proteins_s1 <- ttests_out %>%
slice_min(p.adj, n = 10) %>%
pull(protein)
## Random Forest
# store predictors and response separately
predictors <- train_data %>%
select(-c(group, ados))
response <- train_data %>% pull(group) %>% factor()
# fit RF
set.seed(123)
rf_out <- randomForest(x = predictors,
y = response,
ntree = 1000,
importance = T)
# check errors
rf_out$confusion
# compute importance scores
proteins_s2 <- rf_out$importance %>%
as_tibble() %>%
mutate(protein = rownames(rf_out$importance)) %>%
slice_max(MeanDecreaseGini, n = 10) %>%
pull(protein)
<<<<<<< HEAD
## Logistic Regression
# select subset of interest
=======
>>>>>>> RebeccaC
proteins_sstar <- intersect(proteins_s1, proteins_s2)
biomarker_sstar <- biomarker_clean %>%
select(group, any_of(proteins_sstar)) %>%
mutate(class = (group == 'ASD')) %>%
select(-group)
# partition into training and test set
<<<<<<< HEAD
=======
set.seed(123)
>>>>>>> RebeccaC
biomarker_split <- biomarker_sstar %>%
initial_split(prop = 0.8)
# fit logistic regression model to training set
fit <- glm(class ~ .,
data = training(biomarker_split),
family = 'binomial')
# evaluate errors on test set
class_metrics <- metric_set(sensitivity,
specificity,
accuracy,
roc_auc)
testing(biomarker_split) %>%
add_predictions(fit, type = 'response') %>%
mutate(est = as.factor(pred > 0.5), tr_c = as.factor(class)) %>%
class_metrics(estimate = est,
truth = tr_c, pred,
event_level = 'second')
<<<<<<< HEAD
library(tidyverse)
library(infer)
library(randomForest)
library(tidymodels)
library(modelr)
library(yardstick)
load('data/biomarker-clean.RData')
## MULTIPLE TESTING
####################
# function to compute tests
test_fn <- function(.df){
t_test(.df,
formula = level ~ group,
order = c('ASD', 'TD'),
alternative = 'two-sided',
var.equal = F)
}
ttests_out <- biomarker_clean %>%
# drop ADOS score
select(-ados) %>%
# arrange in long format
pivot_longer(-group,
names_to = 'protein',
values_to = 'level') %>%
# nest by protein
nest(data = c(level, group)) %>%
# compute t tests
mutate(ttest = map(data, test_fn)) %>%
unnest(ttest) %>%
# sort by p-value
arrange(p_value) %>%
# multiple testing correction
mutate(m = n(),
hm = log(m) + 1/(2*m) - digamma(1),
rank = row_number(),
p.adj = m*hm*p_value/rank)
# select significant proteins
proteins_s1 <- ttests_out %>%
slice_min(p.adj, n = 10) %>%
pull(protein)
## RANDOM FOREST
##################
# store predictors and response separately
predictors <- biomarker_clean %>%
select(-c(group, ados))
response <- biomarker_clean %>% pull(group) %>% factor()
# fit RF
set.seed(101422)
rf_out <- randomForest(x = predictors,
y = response,
ntree = 1000,
importance = T)
# check errors
rf_out$confusion
# compute importance scores
proteins_s2 <- rf_out$importance %>%
as_tibble() %>%
mutate(protein = rownames(rf_out$importance)) %>%
slice_max(MeanDecreaseGini, n = 10) %>%
pull(protein)
## LOGISTIC REGRESSION
#######################
# select subset of interest
proteins_sstar <- intersect(proteins_s1, proteins_s2)
biomarker_sstar <- biomarker_clean %>%
select(group, any_of(proteins_sstar)) %>%
mutate(class = (group == 'ASD')) %>%
select(-group)
# partition into training and test set
set.seed(101422)
biomarker_split <- biomarker_sstar %>%
initial_split(prop = 0.8)
# fit logistic regression model to training set
fit <- glm(class ~ .,
data = training(biomarker_split),
family = 'binomial')
# evaluate errors on test set
class_metrics <- metric_set(sensitivity,
specificity,
accuracy,
roc_auc)
testing(biomarker_split) %>%
add_predictions(fit, type = 'response') %>%
mutate(est = as.factor(pred > 0.5), tr_c = as.factor(class)) %>%
class_metrics(estimate = est,
truth = tr_c, pred,
event_level = 'second')
library(tidyverse)
library(infer)
library(randomForest)
library(tidymodels)
library(modelr)
library(yardstick)
load('data/biomarker-clean.RData')
## MULTIPLE TESTING
####################
# function to compute tests
test_fn <- function(.df){
t_test(.df,
formula = level ~ group,
order = c('ASD', 'TD'),
alternative = 'two-sided',
var.equal = F)
}
ttests_out <- biomarker_clean %>%
# drop ADOS score
select(-ados) %>%
# arrange in long format
pivot_longer(-group,
names_to = 'protein',
values_to = 'level') %>%
# nest by protein
nest(data = c(level, group)) %>%
# compute t tests
mutate(ttest = map(data, test_fn)) %>%
unnest(ttest) %>%
# sort by p-value
arrange(p_value) %>%
# multiple testing correction
mutate(m = n(),
hm = log(m) + 1/(2*m) - digamma(1),
rank = row_number(),
p.adj = m*hm*p_value/rank)
# select significant proteins
proteins_s1 <- ttests_out %>%
slice_min(p.adj, n = 10) %>%
pull(protein)
## RANDOM FOREST
##################
# store predictors and response separately
predictors <- biomarker_clean %>%
select(-c(group, ados))
response <- biomarker_clean %>% pull(group) %>% factor()
# fit RF
set.seed(101422)
rf_out <- randomForest(x = predictors,
y = response,
ntree = 1000,
importance = T)
# check errors
rf_out$confusion
# compute importance scores
proteins_s2 <- rf_out$importance %>%
as_tibble() %>%
mutate(protein = rownames(rf_out$importance)) %>%
slice_max(MeanDecreaseGini, n = 10) %>%
pull(protein)
## LOGISTIC REGRESSION
#######################
# select subset of interest
proteins_sstar <- intersect(proteins_s1, proteins_s2)
biomarker_sstar <- biomarker_clean %>%
select(group, any_of(proteins_sstar)) %>%
mutate(class = (group == 'ASD')) %>%
select(-group)
# partition into training and test set
set.seed(101422)
biomarker_split <- biomarker_sstar %>%
initial_split(prop = 0.8)
# fit logistic regression model to training set
=======
>>>>>>> RebeccaC
fit <- glm(class ~ .,
data = training(biomarker_split),
family = 'binomial')
# evaluate errors on test set
class_metrics <- metric_set(sensitivity,
specificity,
accuracy,
roc_auc)
testing(biomarker_split) %>%
add_predictions(fit, type = 'response') %>%
mutate(est = as.factor(pred > 0.5), tr_c = as.factor(class)) %>%
class_metrics(estimate = est,
truth = tr_c, pred,
event_level = 'second')
# load any other packages and read data here
load('../data/biomarker-clean.RData')
library(tidyverse)
library(DiagrammeR)
library(ggplot2)
library(infer)
library(rsample)
library(randomForest)
library(tidymodels)
library(yardstick)
library(modelr)
<<<<<<< HEAD
mermaid("
graph LR
A[Data Collection] --> B{Data Preprocessing}
B --> C{Feature Selection}
C --> D{Model Training}
D --> E{Model Evaluation}
")
=======
>>>>>>> RebeccaC
var_names <- read_csv('../data/biomarker-raw.csv',
col_names = F,
n_max = 2,
col_select = -(1:2)) %>%
t() %>%
as_tibble() %>%
rename(name = V1,
abbreviation = V2) %>%
na.omit()
biomarker_not_transformed <- read_csv('../data/biomarker-raw.csv',
skip = 2,
col_select = -2L,
col_names = c('group',
'empty',
pull(var_names, abbreviation),
'ados'),
na = c('-', '')) %>%
filter(!is.na(group)) %>%
# reorder columns
select(group, ados, everything())
# Select a sample of proteins
set.seed(123)
sample_proteins <- sample(colnames(biomarker_not_transformed)[3:ncol(biomarker_not_transformed)], 10)
# Check data types (optional)
str(biomarker_not_transformed[, sample_proteins])  # View data types of selected proteins
# Handle missing values (optional)
biomarker_not_transformed <- na.omit(biomarker_not_transformed)  # Alternatively, impute missing values
# Melt the data for easier plotting
biomarker_long <- biomarker_not_transformed %>%
pivot_longer(cols = all_of(sample_proteins),
names_to = "protein",
values_to = "value")
# Create a histogram facet plot
ggplot(biomarker_long, aes(x = value)) +
geom_histogram(fill = "steelblue", color = "black") +
facet_wrap(~ protein, scales = "free_x") +
labs(title = "Distribution of Selected Proteins",
x = "Protein Value", y = "Frequency")
# Split the data into training and testing sets
set.seed(123)
biomarker_split <- initial_split(biomarker_clean, prop = 0.8)
train_data <- training(biomarker_split)
test_data <- testing(biomarker_split)
## Multiple Testing
test_fn <- function(.df){
t_test(.df,
formula = level ~ group,
order = c('ASD', 'TD'),
alternative = 'two-sided',
var.equal = F)
}
ttests_out <- train_data %>%
# drop ADOS score
select(-ados) %>%
# arrange in long format
pivot_longer(-group,
names_to = 'protein',
values_to = 'level') %>%
# nest by protein
nest(data = c(level, group)) %>%
# compute t tests
mutate(ttest = map(data, test_fn)) %>%
unnest(ttest) %>%
# sort by p-value
arrange(p_value) %>%
# multiple testing correction
mutate(m = n(),
hm = log(m) + 1/(2*m) - digamma(1),
rank = row_number(),
p.adj = m*hm*p_value/rank)
# select significant proteins based on adjusted p-value
proteins_s1 <- ttests_out %>%
slice_min(p.adj, n = 10) %>%
pull(protein)
## Random Forest
# store predictors and response separately
predictors <- train_data %>%
select(-c(group, ados))
response <- train_data %>% pull(group) %>% factor()
# fit RF
set.seed(123)
rf_out <- randomForest(x = predictors,
y = response,
ntree = 1000,
importance = T)
# check errors
rf_out$confusion
# compute importance scores
proteins_s2 <- rf_out$importance %>%
as_tibble() %>%
mutate(protein = rownames(rf_out$importance)) %>%
slice_max(MeanDecreaseGini, n = 10) %>%
pull(protein)
## Logistic Regression
# select subset of interest
<<<<<<< HEAD
=======
#proteins_sstar <- intersect(proteins_s1, proteins_s2)
#biomarker_sstar <- biomarker_clean %>%
#  select(group, any_of(proteins_sstar)) %>%
#  mutate(class = (group == 'ASD')) %>%
#  select(-group)
# partition into training and test set
#set.seed(123)
#biomarker_split <- biomarker_sstar %>%
#  initial_split(prop = 0.8)
# fit logistic regression model to training set
fit <- glm(class ~ .,
data = training(biomarker_split),
family = 'binomial')
# fit logistic regression model to training set
fit <- glm(class ~ .,
data = train_data,
family = 'binomial')
# evaluate errors on test set
class_metrics <- metric_set(sensitivity,
specificity,
accuracy,
roc_auc)
testing(biomarker_split) %>%
add_predictions(fit, type = 'response') %>%
mutate(est = as.factor(pred > 0.5), tr_c = as.factor(class)) %>%
class_metrics(estimate = est,
truth = tr_c, pred,
event_level = 'second')
test_data %>%
add_predictions(fit, type = 'response') %>%
mutate(est = as.factor(pred > 0.5), tr_c = as.factor(class)) %>%
class_metrics(estimate = est,
truth = tr_c, pred,
event_level = 'second')
# compute importance scores
proteins_s2 <- rf_out$importance %>%
as_tibble() %>%
mutate(protein = rownames(rf_out$importance)) %>%
slice_max(MeanDecreaseGini, n = 10) %>%
pull(protein)
# check errors
rf_out$confusion
set.seed(123)
partitions <- biomarker_clean %>%
initial_split(prop = 0.8)
partitions
fit <- glm(class ~ .,
data = biomarker,
family = binomial(link = "logit"))
set.seed(123)
partitions <- biomarker_clean %>%
initial_split(prop = 0.8)
fit <- glm(class ~ .,
data = biomarker_clean,
family = binomial(link = "logit"))
fit <- glm(class ~ .,
data = biomarker_clean,
family = binomial(link = "logit"))
fit <- glm(class ~ ., data = biomarker_clean, family = binomial(link = "logit"))
# Split the data into training and testing sets
set.seed(123)
biomarker_split <- initial_split(biomarker_clean, prop = 0.8)
train_data <- training(biomarker_split)
test_data <- testing(biomarker_split)
## Multiple Testing
test_fn <- function(.df){
t_test(.df,
formula = level ~ group,
order = c('ASD', 'TD'),
alternative = 'two-sided',
var.equal = F)
}
ttests_out <- train_data %>%
# drop ADOS score
select(-ados) %>%
# arrange in long format
pivot_longer(-group,
names_to = 'protein',
values_to = 'level') %>%
# nest by protein
nest(data = c(level, group)) %>%
# compute t tests
mutate(ttest = map(data, test_fn)) %>%
unnest(ttest) %>%
# sort by p-value
arrange(p_value) %>%
# multiple testing correction
mutate(m = n(),
hm = log(m) + 1/(2*m) - digamma(1),
rank = row_number(),
p.adj = m*hm*p_value/rank)
# select significant proteins based on adjusted p-value
proteins_s1 <- ttests_out %>%
slice_min(p.adj, n = 10) %>%
pull(protein)
## Random Forest
# store predictors and response separately
predictors <- train_data %>%
select(-c(group, ados))
response <- train_data %>% pull(group) %>% factor()
# fit RF
set.seed(123)
rf_out <- randomForest(x = predictors,
y = response,
ntree = 1000,
importance = T)
# check errors
rf_out$confusion
# compute importance scores
proteins_s2 <- rf_out$importance %>%
as_tibble() %>%
mutate(protein = rownames(rf_out$importance)) %>%
slice_max(MeanDecreaseGini, n = 10) %>%
pull(protein)
## Logistic Regression
# select subset of interest
#proteins_sstar <- intersect(proteins_s1, proteins_s2)
#biomarker_sstar <- biomarker_clean %>%
#  select(group, any_of(proteins_sstar)) %>%
#  mutate(class = (group == 'ASD')) %>%
#  select(-group)
# partition into training and test set
#set.seed(123)
#biomarker_split <- biomarker_sstar %>%
#  initial_split(prop = 0.8)
# fit logistic regression model to training set
fit <- glm(class ~ .,
data = train_data,
family = 'binomial')
testing(biomarker_split) %>%
add_predictions(fit, type = 'response') %>%
mutate(est = as.factor(pred > 0.5), tr_c = as.factor(class)) %>%
class_metrics(estimate = est,
truth = tr_c, pred,
event_level = 'second')
# select subset of interest
proteins_sstar <- intersect(proteins_s1, proteins_s2)
biomarker_sstar <- biomarker_clean %>%
select(group, any_of(proteins_sstar)) %>%
mutate(class = (group == 'ASD')) %>%
select(-group)
# partition into training and test set
set.seed(101422)
biomarker_split <- biomarker_sstar %>%
initial_split(prop = 0.8)
# fit logistic regression model to training set
fit <- glm(class ~ .,
data = training(biomarker_split),
family = 'binomial')
# evaluate errors on test set
class_metrics <- metric_set(sensitivity,
specificity,
accuracy,
roc_auc)
testing(biomarker_split) %>%
add_predictions(fit, type = 'response') %>%
mutate(est = as.factor(pred > 0.5), tr_c = as.factor(class)) %>%
class_metrics(estimate = est,
truth = tr_c, pred,
event_level = 'second')
# Split the data into training and testing sets
set.seed(123)
biomarker_split <- initial_split(biomarker_clean, prop = 0.8)
train_data <- training(biomarker_split)
test_data <- testing(biomarker_split)
## Multiple Testing
test_fn <- function(.df){
t_test(.df,
formula = level ~ group,
order = c('ASD', 'TD'),
alternative = 'two-sided',
var.equal = F)
}
ttests_out <- train_data %>%
# drop ADOS score
select(-ados) %>%
# arrange in long format
pivot_longer(-group,
names_to = 'protein',
values_to = 'level') %>%
# nest by protein
nest(data = c(level, group)) %>%
# compute t tests
mutate(ttest = map(data, test_fn)) %>%
unnest(ttest) %>%
# sort by p-value
arrange(p_value) %>%
# multiple testing correction
mutate(m = n(),
hm = log(m) + 1/(2*m) - digamma(1),
rank = row_number(),
p.adj = m*hm*p_value/rank)
# Split the data into training and testing sets
set.seed(123)
biomarker_split <- initial_split(biomarker_clean, prop = 0.8)
train_data <- training(biomarker_split)
test_data <- testing(biomarker_split)
## Multiple Testing
test_fn <- function(.df){
t_test(.df,
formula = level ~ group,
order = c('ASD', 'TD'),
alternative = 'two-sided',
var.equal = F)
}
ttests_out <- train_data %>%
# drop ADOS score
select(-ados) %>%
# arrange in long format
pivot_longer(-group,
names_to = 'protein',
values_to = 'level') %>%
# nest by protein
nest(data = c(level, group)) %>%
# compute t tests
mutate(ttest = map(data, test_fn)) %>%
unnest(ttest) %>%
# sort by p-value
arrange(p_value) %>%
# multiple testing correction
mutate(m = n(),
hm = log(m) + 1/(2*m) - digamma(1),
rank = row_number(),
p.adj = m*hm*p_value/rank)
# select significant proteins based on adjusted p-value
proteins_s1 <- ttests_out %>%
slice_min(p.adj, n = 10) %>%
pull(protein)
## Random Forest
# store predictors and response separately
predictors <- train_data %>%
select(-c(group, ados))
response <- train_data %>% pull(group) %>% factor()
# fit RF
set.seed(123)
rf_out <- randomForest(x = predictors,
y = response,
ntree = 1000,
importance = T)
# check errors
rf_out$confusion
# compute importance scores
proteins_s2 <- rf_out$importance %>%
as_tibble() %>%
mutate(protein = rownames(rf_out$importance)) %>%
slice_max(MeanDecreaseGini, n = 10) %>%
pull(protein)
## Logistic Regression
# select subset of interest
>>>>>>> RebeccaC
proteins_sstar <- intersect(proteins_s1, proteins_s2)
biomarker_sstar <- biomarker_clean %>%
select(group, any_of(proteins_sstar)) %>%
mutate(class = (group == 'ASD')) %>%
select(-group)
# partition into training and test set
biomarker_split <- biomarker_sstar %>%
initial_split(prop = 0.8)
# fit logistic regression model to training set
fit <- glm(class ~ .,
data = training(biomarker_split),
family = 'binomial')
# evaluate errors on test set
class_metrics <- metric_set(sensitivity,
specificity,
accuracy,
roc_auc)
testing(biomarker_split) %>%
add_predictions(fit, type = 'response') %>%
mutate(est = as.factor(pred > 0.5), tr_c = as.factor(class)) %>%
class_metrics(estimate = est,
truth = tr_c, pred,
event_level = 'second')
<<<<<<< HEAD
# evaluate errors on test set
class_metrics <- metric_set(sensitivity,
specificity,
accuracy,
roc_auc)
class_metrics
var_names <- read_csv('../data/biomarker-raw.csv',
col_names = F,
n_max = 2,
col_select = -(1:2)) %>%
t() %>%
as_tibble() %>%
rename(name = V1,
abbreviation = V2) %>%
na.omit()
biomarker_not_transformed <- read_csv('../data/biomarker-raw.csv',
skip = 2,
col_select = -2L,
col_names = c('group',
'empty',
pull(var_names, abbreviation),
'ados'),
na = c('-', '')) %>%
filter(!is.na(group)) %>%
# reorder columns
select(group, ados, everything())
# Select a sample of proteins
set.seed(123)
sample_proteins <- sample(colnames(biomarker_not_transformed)[3:ncol(biomarker_not_transformed)], 10)
# Check data types (optional)
str(biomarker_not_transformed[, sample_proteins])  # View data types of selected proteins
# Handle missing values (optional)
biomarker_not_transformed <- na.omit(biomarker_not_transformed)  # Alternatively, impute missing values
# Melt the data for easier plotting
biomarker_long <- biomarker_not_transformed %>%
pivot_longer(cols = all_of(sample_proteins),
names_to = "protein",
values_to = "value")
# Create a histogram facet plot
ggplot(biomarker_long, aes(x = value)) +
geom_histogram(fill = "steelblue", color = "black") +
facet_wrap(~ protein, scales = "free_x") +
labs(title = "Distribution of Selected Proteins",
x = "Protein Value", y = "Frequency")
var_names <- read_csv('../data/biomarker-raw.csv',
col_names = F,
n_max = 2,
col_select = -(1:2)) %>%
t() %>%
as_tibble() %>%
rename(name = V1,
abbreviation = V2) %>%
na.omit()
biomarker_not_transformed <- read_csv('../data/biomarker-raw.csv',
skip = 2,
col_select = -2L,
col_names = c('group',
'empty',
pull(var_names, abbreviation),
'ados'),
na = c('-', '')) %>%
filter(!is.na(group)) %>%
# reorder columns
select(group, ados, everything())
# Select a sample of proteins
set.seed(123)
sample_proteins <- sample(colnames(biomarker_not_transformed)[3:ncol(biomarker_not_transformed)], 10)
# Check data types (optional)
str(biomarker_not_transformed[, sample_proteins])  # View data types of selected proteins
# Handle missing values (optional)
biomarker_not_transformed <- na.omit(biomarker_not_transformed)  # Alternatively, impute missing values
# Melt the data for easier plotting
biomarker_long <- biomarker_not_transformed %>%
pivot_longer(cols = all_of(sample_proteins),
names_to = "protein",
values_to = "value",
show_col_types = FALSE)
var_names <- read_csv('../data/biomarker-raw.csv',
col_names = F,
n_max = 2,
col_select = -(1:2)) %>%
t() %>%
as_tibble() %>%
rename(name = V1,
abbreviation = V2) %>%
na.omit()
biomarker_not_transformed <- read_csv('../data/biomarker-raw.csv',
skip = 2,
col_select = -2L,
col_names = c('group',
'empty',
pull(var_names, abbreviation),
'ados'),
na = c('-', '')) %>%
filter(!is.na(group)) %>%
# reorder columns
select(group, ados, everything())
# Select a sample of proteins
set.seed(123)
sample_proteins <- sample(colnames(biomarker_not_transformed)[3:ncol(biomarker_not_transformed)], 10)
# Check data types (optional)
str(biomarker_not_transformed[, sample_proteins])  # View data types of selected proteins
# Handle missing values (optional)
biomarker_not_transformed <- na.omit(biomarker_not_transformed)  # Alternatively, impute missing values
# Melt the data for easier plotting
biomarker_long <- biomarker_not_transformed %>%
pivot_longer(cols = all_of(sample_proteins),
names_to = "protein",
values_to = "value")
# Create a histogram facet plot
ggplot(biomarker_long, aes(x = value)) +
geom_histogram(fill = "steelblue", color = "black") +
facet_wrap(~ protein, scales = "free_x") +
labs(title = "Distribution of Selected Proteins",
x = "Protein Value", y = "Frequency")
=======
>>>>>>> RebeccaC
