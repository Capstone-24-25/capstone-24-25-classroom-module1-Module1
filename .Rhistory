geom_boxplot(alpha=0.5)
ggplot(data, aes(x=Duration_of_cleaning, y=Antennae_whipping, fill=Antennae_whipping)) +
geom_boxplot(alpha=0.5)
knitr::opts_chunk$set(echo = TRUE)
library(survival)
library(survminer)
library(ggplot2)
library(ggpubr)
library(tidyverse)
retire <- read.table("retire.txt",header=TRUE,skip=2)
head(retire)
retire.split <- survSplit(Surv(time, death) ~ ageentry + gender,
data = retire,
cut = 48,
start = "start",
episode = "Epi",
end = "stop")
retire <- read.table("retire.txt",header=TRUE,skip=2)
retire$time[which(retire$time == 0)] <- 0.5
head(retire)
retire.split <- survSplit(Surv(time, death) ~ ageentry + gender,
data = retire,
cut = 48,
start = "start",
episode = "Epi",
end = "stop")
head(retire.split)
retire_fit1 <- coxph(Surv(start, stop, death) ~ ageentry + factor(gender) + factoe(gender):Epi, data=retire.split)
retire_fit1 <- coxph(Surv(start, stop, death) ~ ageentry + factor(gender) + factor(gender):Epi, data=retire.split)
summary(retire_fit1)
anova(retire_fit1)
retire_fit1 <- coxph(Surv(start, stop, death) ~ ageentry + gender + gender:Epi, data=retire.split)
summary(retire_fit1)
anova(retire_fit1)
heroin <- read_excel('heroin.xlsx')
head(heroin)
heroin <- read_excel('heroin.xlsx')
heroin
heroin <- read_excel('heroin.xlsx')
head(heroin)
library(flexsurv)
install.packages("flexsurv")
library(flexsurv)
heroin_fit1 <- flexsurvreg(Surv(Time, Status) ~ Clinic + Prison + Dose + Prison:Dose, dist='weibull', data=heroin)
summary(heroin_fit1)
library(flexsurv)
heroin_fit1 <- flexsurvreg(Surv(Time, Status) ~ Clinic + Prison + Dose + Prison:Dose, dist='weibull', data=heroin)
print(heroin_fit1)
plot(heroin_fit1)
bladder <- read_excel('bladder.xlsx')
bladder <- read_excel('bladder.xlsx')
head(bladder)
bladder <- read.table('bladder.xlsx')
bladder <- read.table('bladder.xlsx', header=FALSE)
bladder <- read.table('bladder.xlsx', header=FALSE, skip=1)
bladder <- read.table('bladder.xlsx', header=FALSE, skip=2)
bladder <- read_excel('bladder.xlsx')
head(bladder)
?read_excel
bladder <- read_excel('bladder.xlsx', skip=1)
head(bladder)
bladder <- read_excel('bladder.xlsx', col_names=FALSE)
head(bladder)
bladder <- read_excel('bladder.xlsx', col_names=FALSE)
bladder
bladder <- read_excel('bladder.xlsx', col_names=FALSE)
head(bladder)
library(flexsurv)
heroin_fit1 <- flexsurvreg(Surv(Time, Status) ~ 1 + Clinic + Prison + Dose + Prison:Dose, dist='weibull', data=heroin)
print(heroin_fit1)
library(flexsurv)
heroin_fit1 <- flexsurvreg(Surv(Time, Status) ~ Clinic + Prison + Dose + Prison:Dose, dist='weibull', data=heroin)
print(heroin_fit1)
bladder <- read_excel('bladder.xlsx', col_names=FALSE)
bladder
type(bladder)
typeof(bladder)
bladder <- read_excel('bladder.xlsx', col_names=FALSE)
bladder <- data.frame(matrix(unlist(bladder), nrow=length(bladder), byrow=TRUE))
bladder <- read_excel('bladder.xlsx', col_names=FALSE)
bladder <- data.frame(matrix(unlist(bladder), nrow=length(bladder), byrow=TRUE))
bladder
bladder <- read_excel('bladder.xlsx', col_names=FALSE)
bladder <- data.frame(matrix(unlist(bladder), nrow=length(bladder), byrow=FALSE))
bladder
bladder <- read_excel('bladder.xlsx', col_names=FALSE)
bladder <- data.frame(matrix(unlist(bladder), nrow=length(bladder), byrow=FALSE))
bladder
bladder <- read_excel('bladder.xlsx', col_names=FALSE)
length(bladder)
bladder <- read_excel('bladder.xlsx', col_names=FALSE)
bladder <- data.frame(matrix(unlist(bladder), nrow=53, byrow=FALSE))
bladder
bladder <- read_excel('bladder.xlsx', col_names=FALSE)
bladder <- data.frame(matrix(unlist(bladder), nrow=53, byrow=FALSE))
names(bladder)[1] <- 'id'
bladder
bladder <- read_excel('bladder.xlsx', col_names=FALSE)
bladder <- data.frame(matrix(unlist(bladder), nrow=53, byrow=FALSE))
names(bladder) <- c('id', 'status', 'time', 'drug', 'num', 'size')
bladder
bladder$c <- ifelse(bladder$status==1, 1, 0)
bladder
bladder$c <- ifelse(bladder$status==1, 1, 0)
bladder_fit1 <- coxph(Surv(time, status) ~ c + num + size)
bladder$c <- ifelse(bladder$status==1, 1, 0)
bladder_fit1 <- coxph(Surv(time, status) ~ c + num + size, data=bladder)
summary(bladder_fit1)
bladder$c <- ifelse(bladder$status==1, 1, 0)
bladder_fit1 <- coxph(Surv(time, c) ~ num + size, data=bladder)
summary(bladder_fit1)
bladder <- read_excel('bladder.xlsx', col_names=FALSE)
bladder <- data.frame(matrix(unlist(bladder), nrow=53, byrow=FALSE))
names(bladder) <- c('id', 'status', 'time', 'tx', 'num', 'size')
bladder
bladder$c <- ifelse(bladder$status==1, 1, 0)
bladder_fit1 <- coxph(Surv(time, c) ~ tx + num + size, data=bladder)
summary(bladder_fit1)
bladder_fit2 <- cmprsk::cuminc(bladder$time, bladder$status, bladder$tx)
require(cmprsk)
bladder_fit2 <- cmprsk::cuminc(bladder$time, bladder$status, bladder$tx)
install.packages("cmprsk")
require(cmprsk)
bladder_fit2 <- cmprsk::cuminc(bladder$time, bladder$status, bladder$tx)
ggcompetingrisks(bladder_fit2, multiple_panels=FALSE)
library(survival)
library(survminer)
library(ggplot2)
library(ggpubr)
library(tidyverse)
library(readxl)
binomCall<- function(K,n=4,T=1,S0=100,r=0.04,u=1.2,d=0.9) {
h <- T/n
q <- (exp(r*h)-d)/(u-d)
Sbin <- S0*d^n*(u/d)^(0:n) 	#(n+1) values for ST
qbin <- dbinom(0:n,n,q)		#corresponding probabilities for each value of ST, which is binomial distribution
Payoff <- pmax(Sbin-K,0)	#use payoff function find the Call value for the nodes in the last column
avePayoff <- sum(qbin*Payoff)		# use RNP find premium
return(exp(-r*T)*avePayoff) }
binomcCall(50, 4, 1, 50, 0.05, 1.10517, 0.904837)
binomCall(50, 4, 1, 50, 0.05, 1.10517, 0.904837)
binomCall(50, 4, 1, 50, 0.05, 1.07327, 0.931731)
binomCall(50, 4, 1, 50, 0.05, 1.053, 0.949671)
binomCall(50, 4, 1, 50, 0.05, 1.03719, 0.964144)
binomCall(50, 8, 1, 50, 0.05, 1.07327, 0.931731)
binomCall(50, 15, 1, 50, 0.05, 1.053, 0.949671)
binomCall(50, 30, 1, 50, 0.05, 1.03719, 0.964144)
binomCall(50, 60, 1, 50, 0.05, 1.02616, 0.974511)
binomCall(50, 100, 1, 50, 0.05, 1.0202, 0.980199)
binomCall(50, 150, 1, 50, 0.05, 1.01646, 0.983803)
binTree<-function(S=100, K=110, N=2, r=0.05, delta=0.03, u=1.1,d=0.8,h=0.5){
discount_factor<-exp(-r*h)
q<-(exp((r-delta)*h-d)/(u-d))	#risk neutral probability
V<-array(0,dim=c(N+1,N+1))	#matrix for storing all option values at each node
#each row is one period, the printed matrices represent the lying down tree.
Delta<-B<-array(0,dim=c(N+1,N+1))	#matrix for storing replicating portfolio at each node
for (i in 0:(N)){ #terminal payoff
finalS<-S*(u)^i*(d)^(N-i)  #i-th value of ST
V[N+1,i+1]<-max(finalS-K,0)	#associated option value
}
V_rnp=V #results from risk neutral
for (j in (N):1){# column in the tree
for (i in 0:(j-1)){ #i number of up-moves in the jth column
currentS=S*u^(i)*d^(j-1-i)
B[j,i+1]=discount_factor*(u*V[j+1,i+1] - d*V[j+1,i+2])/(u-d)
Delta[j,i+1] = exp(-delta*h)*(V[j+1,i+2]-V[j+1,i+1])/(currentS*u-currentS*d)
V[j,i+1]=Delta[j,i+1]*currentS+B[j,i+1]
# or if you prefer the risk-neural method when (Delta,B)
V_rnp[j,i+1] <-discount_factor*(q*V_rnp[j+1,i+2] + (1-q)*V_rnp[j+1,i+1])
}
}
return(list(premia=V,Delta=Delta,Bank=B))
}
binTree(50, 50, 4, 0.05, 0, 1.10517, 0.904837, 1/4)
binTree(50, 50, 8, 0.05, 0, 1.07327, 0.931731, 1/8)
binTree(50, 50, 15, 0.05, 0, 1.053, 0.949671, 1/15)
binTree(50, 50, 30, 0.05, 0, 1.03719, 0.964144, 1/30)
binTree(50, 50, 60, 0.05, 0, 1.02616, 0.974511, 1/60)
binTree(50, 50, 100, 0.05, 0, 1.0202, 0.980199, 1/100)
binTree(50, 50, 150, 0.05, 0, 1.01646, 0.983803, 1/150)
binomCall<- function(K,n=4,T=1,S0=100,r=0.04,u=1.2,d=0.9) {
Â  h <- T/n
binomCall<- function(K,n=4,T=1,S0=100,r=0.04,u=1.2,d=0.9) {
h <- T/n
q <- (exp(r*h)-d)/(u-d)
Sbin <- S0*d^n*(u/d)^(0:n) 	#(n+1) values for ST
qbin <- dbinom(0:n,n,q)		#corresponding probabilities for each value of ST, which is binomial distribution
Payoff <- pmax(Sbin-K,0)	#use payoff function find the Call value for the nodes in the last column
avePayoff <- sum(qbin*Payoff)		# use RNP find premium
return(exp(-r*T)*avePayoff) }
binomPut<- function(K,n=4,T=1,S0=100,r=0.04,u=1.2,d=0.9) {
h <- T/n
q <- (exp(r*h)-d)/(u-d)
Sbin <- S0*d^n*(u/d)^(0:n) 	#(n+1) values for ST
qbin <- dbinom(0:n,n,q)		#corresponding probabilities for each value of ST, which is binomial distribution
Payoff <- pmax(K-Sbin,0)	#use payoff function find the Call value for the nodes in the last column
avePayoff <- sum(qbin*Payoff)		# use RNP find premium
return(exp(-r*T)*avePayoff) }
library(math)
u <- e
u <- exp(0.03 * 0.025 + 0.18 * sqrt(0.025))
d <- exp(0.03 * 0.025 - 0.18 * sqrt(0.025))
K <- seq(87, 113, 0.5)
K
K <- seq(87, 113, 0.5)
C <- binomCall(K, 20, 0.5, 100, 0.03, u, d)
K <- seq(87, 113, 0.5)
for (i in K){
print(i)
}
# binomCall(K, 20, 0.5, 100, 0.03, u, d)
K <- seq(87, 113, 0.5)
C <- c()
for (i in K){
append(binomCall(i, 20, 0.5, 100, 0.03, u, d), C)
}
C
# binomCall(K, 20, 0.5, 100, 0.03, u, d)
K <- seq(87, 113, 0.5)
C <- c()
for (i in K){
append(C, binomCall(i, 20, 0.5, 100, 0.03, u, d))
}
C
# binomCall(K, 20, 0.5, 100, 0.03, u, d)
K <- seq(87, 113, 0.5)
C <- c()
for (i in K){
C <- append(C, binomCall(i, 20, 0.5, 100, 0.03, u, d))
}
C
# binomCall(K, 20, 0.5, 100, 0.03, u, d)
plot(K, C)
C
u <- exp(0.03 * 0.025 + 0.18 * sqrt(0.025))
d <- exp(0.03 * 0.025 - 0.18 * sqrt(0.025))
K <- seq(87, 113, 0.5)
C <- c()
for (i in K){
C <- append(C, binomCall(i, 20, 0.5, 100, 0.03, u, d))
}
plot(K, C)
u <- exp(0.03 * 0.025 + 0.18 * sqrt(0.025))
d <- exp(0.03 * 0.025 - 0.18 * sqrt(0.025))
K <- seq(87, 113, 0.5)
P <- c()
for (i in K){
P <- append(C, binomPut(i, 20, 0.5, 100, 0.03, u, d))
}
plot(K, P)
u <- exp(0.03 * 0.025 + 0.18 * sqrt(0.025))
d <- exp(0.03 * 0.025 - 0.18 * sqrt(0.025))
K <- seq(87, 113, 0.5)
P <- c()
for (i in K){
P <- append(P, binomPut(i, 20, 0.5, 100, 0.03, u, d))
}
plot(K, P)
P
u <- exp(0.03 * 0.025 + 0.18 * sqrt(0.025))
d <- exp(0.03 * 0.025 - 0.18 * sqrt(0.025))
K <- seq(87, 113, 0.5)
P <- c()
for (i in K){
P <- append(P, binomPut(i, 20, 0.5, 100, 0.03, u, d))
}
plot(K, P, type = 'cdot')
u <- exp(0.03 * 0.025 + 0.18 * sqrt(0.025))
d <- exp(0.03 * 0.025 - 0.18 * sqrt(0.025))
K <- seq(87, 113, 0.5)
P <- c()
for (i in K){
P <- append(P, binomPut(i, 20, 0.5, 100, 0.03, u, d))
}
plot(K, P, type = 'l')
u <- exp(0.03 * 0.025 + 0.18 * sqrt(0.025))
d <- exp(0.03 * 0.025 - 0.18 * sqrt(0.025))
K <- seq(87, 113, 0.5)
P <- c()
for (i in K){
P <- append(P, binomPut(i, 20, 0.5, 100, 0.03, u, d))
}
plot(K, P, type = b)
u <- exp(0.03 * 0.025 + 0.18 * sqrt(0.025))
d <- exp(0.03 * 0.025 - 0.18 * sqrt(0.025))
K <- seq(87, 113, 0.5)
P <- c()
for (i in K){
P <- append(P, binomPut(i, 20, 0.5, 100, 0.03, u, d))
}
plot(K, P, type = 'b')
u <- exp(0.03 * 0.025 + 0.18 * sqrt(0.025))
d <- exp(0.03 * 0.025 - 0.18 * sqrt(0.025))
K <- seq(87, 113, 0.5)
P <- c()
for (i in K){
P <- append(P, binomPut(i, 20, 0.5, 100, 0.03, u, d))
}
plot(K, P)
url <- 'https://raw.githubusercontent.com/PSTAT197-F23/pstat197a/main/materials/scripts/package-installs.R'
source(url)
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
url <- 'https://raw.githubusercontent.com/PSTAT197-F23/pstat197a/main/materials/scripts/package-installs.R'
source(url)
install.packages("tidymodels")
rm(list = ls())
# load packages
library(tidyverse)
library(tidymodels)
library(modelr)
library(rsample)
library(yardstick)
# read data
url <- 'https://raw.githubusercontent.com/pstat197/pstat197a/main/materials/labs/lab4-logistic/data/biomarker_clean.csv'
s_star <- c("DERM", "RELT", "IgD", "PTN", "FSTL1")
biomarker <- read_csv(url) %>%
# subset to proteins of interest and group
select(group, any_of(s_star)) %>%
# convert group (chr) to binary (lgl)
mutate(class = (group == 'ASD')) %>%
select(-group)
# for reproducibility
set.seed(102022)
# partition data
partitions <- biomarker %>%
initial_split(prop = 0.8)
# examine
partitions
# training set
training(partitions) %>% head(4)
# testing set
testing(partitions) %>% head(4)
# fit glm
fit <- glm(class ~ .,
data = biomarker,
family = binomial(link = "logit"))
tidy(fit)
# compute predictions on the test set
testing(partitions) %>%
add_predictions(fit)
# manually transform to probabilities
testing(partitions) %>%
add_predictions(fit) %>%
mutate(probs = 1/(1 + exp(-pred))) %>%
select(class, pred, probs) %>%
head(5)
# predict on scale of response
testing(partitions) %>%
add_predictions(fit, type = 'response') %>%
select(class, pred) %>%
head(5)
# predict classes
testing(partitions) %>%
add_predictions(fit, type = 'response') %>%
mutate(pred.class = (pred > 0.5)) %>%
select(class, pred, pred.class) %>%
head(5)
# tabulate
testing(partitions) %>%
add_predictions(fit, type = 'response') %>%
mutate(pred.class = (pred > 0.5)) %>%
select(class, pred.class) %>%
table()
# store predictions as factors
pred_df <- testing(partitions) %>%
add_predictions(fit, type = 'response') %>%
mutate(pred.class = (pred > 0.5),
group = factor(class, labels = c('TD', 'ASD')),
pred.group = factor(pred.class, labels = c('TD', 'ASD')))
# check order of factor levels
pred_df %>% pull(group) %>% levels()
# compute specificity
pred_df %>%
specificity(truth = group,
estimate = pred.group,
event_level = 'second')
# sensitivity
pred_df %>%
sensitivity(truth = group,
estimate = pred.group,
event_level = 'second')
pred_df %>%
accuracy(truth = group,
estimate = pred.group,
event_level = 'second')
# define panel (arguments must be yardstick metric function names)
panel_fn <- metric_set(sensitivity, specificity)
# compute
pred_df %>%
panel_fn(truth = group,
estimate = pred.group,
event_level = 'second')
# Action
# panel of precision, recall, and f1
panel <- metric_set(precision, recall, f_meas)
predictions %>%
panel(truth = group,
estimate = pred.group,
event_level = 'second')
# Action
# panel of precision, recall, and f1
panel <- metric_set(precision, recall, f_meas)
pred_df %>%
panel(truth = group,
estimate = pred.group,
event_level = 'second')
ibrary(tidyverse)
library(tidyverse)
# examine distribution of non transformed data
setwd('/Users/davidpan/Desktop/PSTAT197/module1-group-1')
var_names <- read_csv('data/biomarker-raw.csv',
col_names = F,
n_max = 2,
col_select = -(1:2)) %>%
t() %>%
as_tibble() %>%
rename(name = V1,
abbreviation = V2) %>%
na.omit()
# function for trimming outliers (good idea??)
trim <- function(x, .at){
x[abs(x) > .at] <- sign(x[abs(x) > .at])*.at
return(x)
}
# read in data
biomarker_clean_raw <- read_csv('data/biomarker-raw.csv',
skip = 2,
col_select = -2L,
col_names = c('group',
'empty',
pull(var_names, abbreviation),
'ados'),
na = c('-', '')) %>%
filter(!is.na(group)) %>%
# reorder columns
select(group, ados, everything())
biomarker_clean <- read_csv('data/biomarker-raw.csv',
skip = 2,
col_select = -2L,
col_names = c('group',
'empty',
pull(var_names, abbreviation),
'ados'),
na = c('-', '')) %>%
filter(!is.na(group)) %>%
# log transform, center and scale, and trim
mutate(across(.cols = -c(group, ados),
~ trim(scale(log10(.x))[, 1], .at = 3))) %>%
# reorder columns
select(group, ados, everything())
biomarker_clean
biomarker_clean_raw
tail(biomarker_clean)
biomarker_clean_raw
ggplot(biomarker_clean_raw, aes(x=NSE)) + geom_histogram()
ggplot(biomarker_clean, aes(x=NSE)) + geom_histogram()
ggplot(biomarker_clean_raw, aes(x=NSE)) + geom_histogram()
ggplot(biomarker_clean_raw, aes(x=NSE, color=group)) + geom_histogram()
# pick a random protein (NSE) to see its distribution
ggplot(biomarker_clean_raw, aes(x=NSE, color=group)) + geom_histogram(fill='white')
ggplot(biomarker_clean_raw, aes(x=NSE, color=group)) + geom_histogram(fill='white', alpha=0.5)
ggplot(biomarker_clean_raw, aes(x=NSE, color=group)) + geom_histogram(fill='white', alpha=0.5, position='identity')
ggplot(biomarker_clean_raw, aes(x=NSE, color=group)) + geom_histogram(fill='white', alpha=0.5)
ggplot(biomarker_clean_raw, aes(x=NSE, color=group)) +
geom_histogram(fill='white', alpha=0.5, position='dodge')
# pick a random protein (NSE) to see its distribution
ggplot(biomarker_clean_raw, aes(x=NSE, color=group)) +
geom_histogram(fill='white', alpha=0.5)
# pick a random protein to see its distribution
ggplot(biomarker_clean_raw, aes(x=SMAD2, color=group)) +
geom_histogram(fill='white', alpha=0.5)
# pick a random protein to see its distribution
ggplot(biomarker_clean, aes(x=SMAD2, color=group)) +
geom_histogram(fill='white', alpha=0.5)
_raw
# pick a random protein to see its distribution
ggplot(biomarker_clean_raw, aes(x=SMAD2, color=group)) +
geom_histogram(fill='white', alpha=0.5)
# pick a random protein to see its distribution
ggplot(biomarker_clean_raw, aes(x=SMAD2, color=group, fill=group)) +
geom_histogram(alpha=0.5)
View(biomarker_clean_raw)
View(biomarker_clean_raw)
# pick another protein
ggplot(biomarker_clean_raw, aes(x=BTC, color=group, fill=group)) +
geom_histogram(alpha=0.5)
# compare with transformed data
ggplot(biomarker_clean, aes(x=BTC, color=group, fill=group)) +
geom_histogram(alpha=0.5)
